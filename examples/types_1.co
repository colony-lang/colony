
NoneType := ()
None: NoneType = NoneType()
Some: type = <V> -> (v: V) 
Option: type = <V> -> (NoneType | Some<V>)

Ok: type = <V> -> (v: V)
Err: type = <E> -> (__type__: type, e: E)
Result: type = <V, E> -> (Ok<V> | Err<E>)


ValueError: Err = <E:=str> -> Err<E>
KeyError: Err = <E:=str> -> Err<E>
ZeroDivisionError: Err = <E:=str> -> Err<E>


// example 1
err := ZeroDivisionError()

match(err)
    .case(ZeroDivisionError, (e) -> { panic(e) })
    .case(Err<str>, (e) -> { panic(e) })
    .case(Err, (e) -> { panic(e) })
    .default(_ -> { abort(-1) })

// example 2
div := (x: Number, y: Number) -> Result<Number, Err> {
    z: Result<Number, Err>

    y == 0 ? {
        z = ZeroDivisionError()
        return(z)
    }

    z = Ok(x / y)
    z
}

