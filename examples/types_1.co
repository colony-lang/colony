
NoneType := ()
None: NoneType = NoneType()
Some: type = <V> -> (v: V) 
Option: type = <V> -> (NoneType | Some<V>)

Ok: type = <V> -> (v: V)
Err: type = <E> -> (e: E)
Result: type = <V, E> -> (Ok<V> | Err<E>)


// ZeroDivisionError: type = (__bases__ := [Err<str>], e: str = 'division by zero'))
ZeroDivisionError: type = derive(
    [Err<str>],
    (e: str = 'division by zero')
)


err := ZeroDivisionError()

// issubtype(err, ZeroDivisionError)
match(err)
    .case(ZeroDivisionError, (e) -> { panic(e) })

// issubtype(err.__type__.__bases__[0], Err<str>)
match(err)
    .case(Err<str>, (e) -> { panic(e) })

// issubtype(err.__type__.__bases__[0], Err)
match(err)
    .case(Err, (e) -> { panic(e) })


// Error ???
div := (x: Number, y: Number) -> Result<Number, Error> {

}
