
NoneType := ()
None: NoneType = NoneType()
Some: type = <V> -> (v: V) 
Option: type = <V> -> (NoneType | Some<V>)

Ok: type = <V> -> (v: V)
Err: type = <E> -> (e: E)
Result: type = <V, E> -> (Ok<V> | Err<E>)


ValueError: Err = (__type__: type = Err<str>, e: str = 'value error')
KeyError: Err = (__type__: type = Err<str>, e: str = 'key error')
AttrError: Err = (__type__: type = Err<str>, e: str = 'attr error')
TypeError: Err = (__type__: type = Err<str>, e: str = 'type error')
ZeroDivisionError: Err = (__type__: type = Err<str>, e: str = 'zero division error')

// example 1
err := ZeroDivisionError()

match(err)
    .case(ZeroDivisionError, (e) -> { panic(e) })
    .case(Err<str>, (e) -> { panic(e) })
    .case(Err, (e) -> { panic(e) })
    .default(_ -> { abort(-1) })

// example 2
mul := (x: Number, y: Number) -> Result<Number, Err> {
    z: Result<Number, Err>
    typeof(x) != typeof(y) ? return(TypeError())
    z = Ok(x * y)
    z
}

div := (x: Number, y: Number) -> Result<Number, Err> {
    z: Result<Number, Err>
    typeof(x) != typeof(y) ? return(TypeError())
    y == 0 ? return(ZeroDivisionError())
    z = Ok(x / y)
    z
}

