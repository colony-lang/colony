//
// Ok = type<T> { .v: field[T] }
// Err = type<E> { .e: field[E] }
// Result = enum<T, E> (Ok<T> | Err<E>)
//
Ok = type {
    .__name__: "Ok",
    .__gentypeparams__: [object],

    .__getitem__: (self, obj: object) -> Ok {
        match(
            obj,
            type -> Ok {
                
            },
            -> TypeError[str] {
                TypeError[str]("Generic type parameters are expected to be types")
            }
        )
    }
}

Err = type {
    .__name__: "Err",
    .__gentypeparams__: [object],
}

TypeError = Err + {
    .__name__: "TypeError",
}

Result: type = type {
    .__name__: "Result",
    .__gentypeparams__: [object, object],
    .__typevariants__: [Ok, Err],

    .__getitem__: (self, obj: object) -> Result {
        match(
            obj,
            type -> Result {

            },
            -> TypeError[str] {
                TypeError[str]("Generic type parameters are expected to be types")
            }
        )
    }
}

r0: Result = Ok[int](0)
r1: Result = Err[str]("Some error")
