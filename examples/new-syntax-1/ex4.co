// bool
a = true
b: bool = false

// int
a = 10
a: int = 10

// float
a = 1.1
a: float = 1.1

// bytes
a = b'123'
a: bytes = b''

// str - utf8 string 
a = 'abc123'
a: str = 'abc123'

// list / positional objects
a = [0, 1, 'a']
a: list = [0, 1, 'a']
a: list[int] = [0, 1, 2]

a[0]
a.0

// dict / named object
d = {.x: 10, .y: -0.1, 'z': 20}
d: dict = {.x: 10, .y: -0.1, 'z': 20}
d: dict[x: int, y: float, z: int] = {.x: 10, .y: -0.1, 'z': 20}         // ?
d: dict[str][x: int, y: float, z: int] = {.x: 10, .y: -0.1, 'z': 20}    // ?

d['x']
d.x

// blocks
b = -> { 0 }
b = -> int { 0 }
b: block = -> { 0 }
b: block = -> int { 0 }
b: block[int] = -> int { 0 }

r: int = None |> b

b = -> int { -> int { 0 }}
b: block = -> int { -> int { 0 }}
b: block[block] = -> int { -> int { 0 }}
b: block[block[int]] = -> int { -> int { 0 }}

b0 = -> { _ + 0 }
b1 = -> { _ + 1 }
b2 = -> { _ + 2 }
b3 = b0 -> b1 -> b2

b3 = -> { _ + 0 } -> { _ + 1 } -> { _ + 2 }
b3 = -> int { _ + 0 } -> int { _ + 1 } -> int { _ + 2 }
b3 = -> int { _ + 0 } -> int { _ + 1 } -> int { _ + 2 }

r = 0 |> b3

// named "capture" tuple
p = (x,)
p = (x, y)
p: tuple = (x, y)
p: tuple = (x, y=20)
p: tuple = (x: int, y: int=20)
p: tuple[int, int] = (x: int, y: int=20)
p: tuple = (x: int, y: int=20, *pargs, **nargs)
p: tuple[int, int, *list, **dict] = (x: int, y: int=20, *pargs, **nargs)

// forming functions out of tuple and blocks
f0: fn[[int, int], int] = p -> b
f0: fn[[int, int], int] = p -> int { x + y }
f0: fn[[int, int], int] = (x: int, y: int=20) -> b
f0: fn[[int, int], int] = (x: int, y: int=20) -> int { x + y }

b = -> {}
p = ()
f1 = () -> {}
f1 = () -> b
f1 = p -> b
f1 = p -> {}

// function calls
r0: int = f0(10, 20)
r0: int = f0(10, y=20)
r0: int = f0(10, *[20])
r0: int = f0(10, **{.y: 20})
r0: int = f0(*[10, 20])
r0: int = f0(*[10, 20], **{})
r0: int = f0(*[10], **{.y: 20})
r0: int = f0(*[], **{.x: 10, .y: 20})
r0: int = f0(**{.x: 10, .y: 20})
