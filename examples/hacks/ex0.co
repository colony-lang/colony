//
// primitive types
//
b: bool = true
i: int = 10
f: float = 20.0
s: str = 'abc123'

//
// collections
//
a: List[int] = [0, 1, 2, 3]
d: Dict[str, float] = {'x': 0.0, 'y': 1.0}

//
// tuple - product type
//
p: Tuple[x: float, y: float] = (x: 1.0, y: 2.0)
p: (x: float, y: float) = (x: 1.0, y: 2.0)

T: Type = Tuple[x: float, y: float]
T: Type = (x: float, y: float)
p: T = (x: 1.0, y: 2.0)

T: Type = Tuple[float, float]
T: Type = (float, float)
p: T = (1.0, 2.0)

//
// union - sum type
//
x: Union[int, float] = 1
y: Union[int, float] = 1.0

x: int | float = 1
y: int | float = 1.0

U: Type = Union[int, float]
U: Type = int | float
x: U = 1
y: U = 1.0

p: Tuple[x: Union[int, float], y: Union[int, float]] = (x: 1, y: 2.0)
p: (x: int | float, y: int | float) = (x: 1, y: 2.0)

U: Type = Union[int, float]
U: Type = int | float
p: Tuple[x: U, y: U] = (x: 1, y: 2.0)
p: (x: U, y: U) = (x: 1, y: 2.0)

U: Type = Union[int, float]
T: Type = Tuple[x: U, y: U]
U: Type = int | float
T: Type = (x: U, y: U)
p: T = (x: 1, y: 2.0)

U: Type = Union[int, float]
X: Type = Tuple[x: U]
Y: Type = Tuple[y: U]
P: Type = Union[X, Y]
U: Type = int | float
X: Type = (x: U)
Y: Type = (y: U)
P: Type = X | Y
p0: P = (x: 10)
p1: P = (y: 10.0)

//
// Option
//
a: Option[int] = 1
b: Option[int] = None

//
// Result
//
a: Result[int, str] = Ok[int](1)
b: Result[int, str] = Err[str]('Nope')
