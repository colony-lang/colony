// function
// inline composition of struct and block
f := (x: i64, y: i64) -> i64 {
    //                   ^
    //                   |- block starts here; `i64` is type of return object
    x + y
}

r := f(1, 2)
r == 3

// function
// composition of struct and block
Args := (x: i64, y: i64)

f := Args -> i64 {
    x + y
}

r := f(1, 2)
r == 3

// generic function
// inline composition of generic, struct and block
f := <T: type> -> (x: T, y: T) -> T {
    x + y
}

r := f<i64>(1, 2)
r == 3

// generic function
// composition of generic struct and block
A := <T: type> -> (x: T, y: T)

f := A -> T {
    x + y
}

r := f<i64>(1, 2)
r == 3