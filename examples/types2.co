
/*
 * Product types
 */
type Vec3 {
    x: i32
    y: i32
    z: i32
}

/*
 * Sum types
 */
/* example 1 */
type None;
let Node: Type<T> = None | Tuple<T>(value: T, next: Node<T>)

let x0: Node<i32> = None                    // x0 = None
let x1: Node<i32> = (10, x1)                // x1 = [10]
let x2: Node<i32> = (20, x2)                // x2 = [20, 10]
let x3: Node<i32> = (30, x3)                // x3 = [30, 20, 10]

/* example 2 */
type None;
let Node: Type<T> = None | Tuple<T>(value: T, next: Node<T>)

let x0: Node<i32> = None                    // x0 = None
let x1: Node<i32> = (10, None)              // x1 = [10]
let x2: Node<i32> = (20, (10, None))        // x2 = [20, 10]
let x3: Node<i32> = (30, (20, (10, None)))  // x3 = [30, 20, 10]
