
f1 := (x: f32, y: f32) -> f32 | Result[f32, str] {
    x / y
}

a: f32 | Result[f32, str] = f1(1.0, 0.0)

b: f32 = isinstanceof(a, f32) ? a :
         isinstanceof(a, Ok[f32]) ? a.unwrap() :
         isinstanceof(a, ZeroDivisonError) ? Infinite :
         isinstanceof(a, Err) ? NaN :
         isinstanceof(a, object) ? 0.0 :
         NaN

c: f32 = a.match(f32)
          .match(Ok[f32])
          .match(ZeroDivisionError, Infinite)
          .match(Err, NaN)
          .match(object, (o) -> { 0.0 })
          .default((o) -> { NaN })

