/*
 * struct types / product types
 */
A: type = struct(x: i32=0, y: f32=0.0)
a0: A = A(x=-1, y=-2.0)
a1: A = A(-2, -3.0)
a0.x == a1.x - 1

/*
 * union types / sum types
 */
B: type = union(i32, f32)
B: type = i32 | f32
b0: B = -1_i32
b1: B = -2.0_f32

A: type = struct(i32, i32)
B: type = struct(f32, f32)
C: type = struct(i32, i32, f32, f32)

D: type = union(A, B, C)
D: type = A | B | C
// D.__type__ := union      // implicit, immutable
// D.__name__ := 'D'        // implicit, mutable
// D.__bases__ := [A, B, C] // implicit, immutable
// D.__fields__ := ns()     // implicit, immutable

d := 1                      // doesn't panic
d: any = 1                  // doesn't panic
d: D = 1                    // panics because 1 is not of of types of D.__bases__
d: Result[D, str] = 1       // TypeErr('...')

//
// custom user-defined types: A, B, C
//
any: type = struct()
// any.__type__ := struct   // implicit, immutable
// any.__name__ := 'any'    // implicit, mutbale
// any.__bases__ := []      // implicit, immutable
// any.__fields__ := ns()   // implicit, immutable

any.__repr__ := (self) -> str {
    f'<{self::__type__::__name__} at {addressof(self)}>'
}

A: type = struct(x: f32, y: f32) & struct(z: f32)
A: type = struct(x: f32, y: f32, z: f32)

// A
A: type = struct(x: f32)
// A.__type__ := struct         // implicit, immutable
// A.__name__ := 'A'            // implicit, mutbale
// A.__bases__ := [any]         // implicit, immutable
// A.__fields__ := ns(x: f32)   // implicit, immutable

A.add_x := (self, other: A) -> A {
    A(self.x + other.x)
}

A.__add__ := A.add_x

// B
B: type = struct(y: f32)
// B.__type__ := struct         // implicit, immutable
// B.__name__ := 'B'            // implicit, mutable
// B.__bases__ := [any]         // implicit, immutable
// B.__fields__ := ns(y: f32)   // implicit, immutable

B.add_y := (self, other: B) -> B {
    B(self.y + other.y)
}

B.__add__ := B.add_y

// C
C: type = A & B     // (x: f32,) & (y: f32,) == (x: f32, y: f32)
// C.__type__ := struct                 // implicit, immutable
// C.__name__ := 'C'                    // implicit, mutable
// C.__bases__ := [A, B]                // implicit, immutable
// C.__fields__ := ns(x: f32, y: f32)   // implicit, immutable

C.__init__ := (self, x: f32, y: f32) -> C {
    self.x := x
    self.y := y
}

C.__add__ := (self, other: C) -> C {
    C(self.x + other.x, self.y + other.y)
}

c0: C = C(1.0, 2.0)
c1: C = C(2.0, 3.0)
c2: C = c0 + c1 // c2: C = (c0::__type__::__add__(c0, c1))
c3: C = C(...c2)

c0::__type__ == C
typeof(c0) == C

c3.x := c3.x * 2    // c3 := (
                    //  c3::__type__::__set__(
                    //      c3,
                    //      'x',
                    //      (c3::__type__::__get__(
                    //          c3,
                    //          'x'
                    //      ) * 2)
                    //  )

// c3 := (c3.x := c3.x * 2)
c3.x *= 2

// equivalent of `c3.x := c3.x * 2`
c3 := (c3.x := c3.x * 2)

/*
 * conditional expression "?"
 */
typeof(c3) ? {
    C && (c3.x == 2 || c3.y == 2) => { c3.x + c3.y }
    C => { c3.x + c3.y }
    B => { c3.y }
    A => { c3.x }
    _ => { sys.exit(1) }
}
