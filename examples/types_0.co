int: type = u8 | i32 | u32 | i64 | u64
float: type = f32 | f64
Number: type = int | float

A: type = (x: Number)
B: type = <Y> -> (y: Y)

C: type = <Y> -> (a: A, b: B<Y>) <- {
    __add__: (self, other: C) -> C {
        r: C = C(
            a: A(self.a.x + other.a.x),
            b: B<Number>(self.b.y + other.b.y),
        )

        r
    }
}

c0: C = C(
    a: A(1),
    b: B<Number>(2),
)

c1: C = C(
    a: A(2),
    b: B<Number>(3),
)

// c2: C = c0.__type__.__add__(c0, c1)
c2: C = c0 + c1

