// struct
A: struct = (x: i64, y: i64=0)

// generic
G: generic = <x: i64, y: i64=0>

// union
Num64: union = i64 | f64;
Num64Container_0: union = list<i64> | list<f64>;
Num64Container_1: type = list<i64 | f64>;

// struct pseudo implementation
struct: type = (
    __new__ := (cls: type, [args]: list, {kwargs}: dict) -> cls {
        self: Self = (
            __type__: type = cls,
            __closure__ := cls,
        )

        // NOTE: work out creation of struct; what is meaning of args and kwargs?
        // self := self.extend(args)
        // self := self.extend(kwargs)
        self
    },
    __call__ := (cls: type, [args]: list, {kwargs}: dict) -> cls {
        self: cls = cls.__new__(cls, [args]=args, {kwargs}=kwargs)
        self
    },
    __repr__ := (obj) -> str {
        "({} at {})".format(
            obj.__type__.__name__,
            addressof(obj),
        )
    },
);
