import { MutList } from "mut"

/*
 * Persistent range
 */
fn range<T>(begin: T, end: T, step: T) -> List<T> {
    // assert: step == 1

    // determin size of array
    let len: u64 = if (begin < end) {
        end - begin
    } else {
        begin - end
    }

    // create array
    let mut_list: MutList<T> = MutList<T>.new_with_len(len)

    // populate
    let curr: T = begin

    for (let i: u64 = 0; i < len; i++) {
        mut_list[i] = curr
        curr += step
    }

    let imut_list: List<T> = mut_list.imut()
    return imut_list
}

// example 1
let a: List<i32> = range<i32>(5, 1, -1)
// a == [5, 4, 3, 2]

// example 2
let b: List<i32> = range<i32>(2)
b += range<i32>(2, 4)
b += range<i32>(4, 6)
b += range<i32>(6, 8)
b += range<i32>(8, 10)
// b == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// example 3
let c: List<i32> = (
    range<i32>(2) +
    range<i32>(2, 4) +
    range<i32>(4, 6) +
    range<i32>(6, 8) +
    range<i32>(8, 10)
)
// c == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

/*
 * Transient range
 */
fn trans_range<T>(end: T) -> List<T> {
    let mut_arr: MutList<T> = MutList<T>.new_with_len(end)
    each(mut_arr.items(), fn (i, n): mut_arr[i] = i)
    let imut_list: List<T> = mut_arr.imut()
    return imut_list
}

let c: MutList<i32> = trans_range<i32>(10)
