//
// partial function call
//
f = int -> fn { int -> _ + 1 }
f0 = f 1
r0 = f0 2
r0 == 3

r1 = f 1 2
r1 == 3

//
// generics example
//
A = (K: type, V: type) -> type {
    .__gentypes__: [K, V], // required to distinguish between A[str, int] and A[int, float]
    .items: dict[K, V],
    
    .__init__: (self) -> Self {
        self.items = dict[K, V]()
        self
    },
    
    .__add__: (self, other: Self) -> Self {
        new: Self = self.items + other.items
    },
    
    .set: (self, key: K, value: V) -> {
        self = (self.items[key] = value)
        self
    },
}

a0: A = A[str, int]()
a1: A = A[str, int]()
a2: A = a0 + a1

