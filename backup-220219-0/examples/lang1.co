//
//
//
inc := (x: int)-> int { x + 1 }
inc := (x: int)-> (int { x + 1 })

r: int = inc(1)
r == 2

F: type = fn((int,), fn((int,), fn((int,), int)))
F: type = fn(int) -> fn(int) -> fn(int) -> int
f: F = (x: int) -> (y: int) -> (z: int) -> int { x + y + z }
r: int = f(10)(20)(30)

//
//
//
c := int { x + 1 }
inc := (x: int) -> c
r := inc(1)
r == 2

//
//
//
c := int { x + 1 }
d := int { $ + y + 2 }
e := int { $ }

F: type = fn((int, int), int, int)
F: type = fn(int, int) -> int -> int
f: F = (x: int, y: int) -> c -> d -> e
r := f(1, 2)
r == 6
