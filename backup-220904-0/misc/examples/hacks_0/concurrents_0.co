//
// IDEAS ONLY, NOT OFFICIAL EXAMPLE
//

//
// event loop / yield / async / await_all ???
//
{ sum } := import("fp")
{ EventLoop } := import("concurrent")

loop := EventLoop.get_default_loop()
{ async, await_all } := loop

f0 := async((b: int, e: int) -> int -> {
    yield()
    r: = sum(range(b, e))
    r
})

coros := range(0, 10, 2)
    .map((i) -> {
        coro := f0(i, i + 2)
        coro
    })

results := await_all(coros)
results == [1, 5, 9, 13, 17]

//
// event loop / yield / async / await 1 ???
//
{ sum } := import("fp")
{ EventLoop } := import("concurrent")

loop := EventLoop.get_default_loop()
{ await, async } := loop

f0 := async((b: int, e: int) -> int -> {
    yield()
    r: = sum(range(b, e))
    r
})

coros := range(0, 10, 2)
    .map((i) -> {
        coro := f0(i, i + 2)
        coro
    })

results := coros.map((coro) -> {
    r := await(coro)
    r
})

results == [1, 5, 9, 13, 17]

//
// event loop / yield / async / await 2 ???
//
{ sum } := import("fp")
{ EventLoop } := import("concurrent")

loop := EventLoop.get_default_loop()
{ await, async } := loop

f0 := async((b: int, e: int) -> int -> {
    yield()
    r: = sum(range(b, e))
    r
})

results := range(0, 10, 2)
    .map((i) -> {
        f0(i, i + 2)
    })
    .map((coro) -> {
        await(coro)
    })

results == [1, 5, 9, 13, 17]

//
// event loop / yield / async / await 3 ???
//
{ sum } := import("fp")
{ await, async } := import("concurrent")

f0 := async((b: int, e: int) -> int -> {
    yield()
    r: = sum(range(b, e))
    r
})

results := range(0, 10, 2)
    .map((i) -> {
        f0(i, i + 2)
    })
    .map((coro) -> {
        await(coro)
    })

results == [1, 5, 9, 13, 17]