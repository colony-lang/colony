//
// struct
//
P: struct = (x: f64=0.0, y: f64=0.0)
P: struct = (x: f64, y: f64)
P: struct = (x:=0.0, y:=0.0)

p: P = P(1.0, 2.0)
p: P = P(x=1.0, y=2.0)
p: P = P()

//
// angle struct
//
G: angle_struct = <X: type=type, Y: type=type>
G: angle_struct = <X: type, Y: type>
G: angle_struct = <X:=type, Y:=type>

g: G = G<X=i64, Y=i64>
g: G = G<i64, i64>
g: G = G<>

//
// square struct
//
L: square_struct = [x: f64=0.0, y: f64=0.0]
L: square_struct = [x: f64, y: f64]
L: square_struct = [x:=0.0, y:=0.0]

l: L = L[x=1.0, y=2.0]
l: L = L[1.0, 2.0]
l: L = L[]

//
// type_chain
//
P: type_chain = <T:=i64|f64> -> (x: T=T.default, y: T=T.default)

p: P = P<i64>(1, 2)
p: P = P<T=i64>(1, 2)
p: P = P<>(1, 2.0)

//
// type_chain
//
P: type_chain = <T:=i64|f64> -> [x: T=T.default, y: T=T.default]

p0: P = P<f64>[1.0, 2.0]
p0: P = P<>[1, 2.0]

//
// type_chain
//
P: type_chain = <T:=i64|f64> -> [X: type=T, Y: type=T] -> (x: X=X.default, y: Y=Y.default)

p: P = P<f64>[Y=i64](1.0, 2)
p: P = P<>[](1, 2.0)

//
// type_chain
//
P: type_chain = [T:=i64|f64] -> <X: type=T, Y: type=T> -> (x: X=X.default, y: Y=Y.default)

p: P = P[f64]<Y=i64>(1.0, 2)
p: P = P[]<>(1.0, 2)

//
// type_chain
//
P: type_chain = (T:=i64|f64) -> (X: type=T, Y: type=T) -> (x: X=X.default, y: Y=Y.default)

p: P = P(f64)(Y=i64)(1.0, 2)
p: P = P()()(1.0, 2)
