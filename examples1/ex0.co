let a0 = 10 // type of a is `object`
let a1: i32 = 10 // error on assignment, type of 10 is i64
let a2 = 10i32 // type of a is `object`
let a3: i32 = 10i32 // ok, type of a is i32 and value on the right 10i32 match

let b0: Array[i64] = [0, 1, 2, 3, 5, 8, 13]

let c0: Dict[str, i64] = {"a": 0, "b": 1, "c": 2}
let c1: Dict<T, V> = {0.0: false, 1.0: true}

let A = {
    .x: field(f64, 0.0),
    .y: field(f64, 1.0),
    .new: fn(cls: Type, x: f64, y: f64) -> A {
        let self = {
            .__class__: cls,
            .x: x,
            .y: y,
        }

        return self
    }
    .__add__: fn(self: A, other: A) -> A {
        let res: A = A.new(self.x + other.x, self.y + other.y)
        return res
    }
}

let a0: A = A.new(0.0, 1.0)
let a1: A = A.new(1.0, 2.0)
let a2: A = a0 + a1
