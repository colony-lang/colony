//  custom `async` from custom event loop
{ Loop } := import('async')
loop := Loop()
async := loop.async

// custom `async` from anonymous loop
{ async } := Loop()

// default `async` of default event loop
// imported by default in runtime, __builtins__
{ async } := import('async')

// f0: fn = (x: f32, y: f32) -> f32 { ... }
f0 := fn((x: f32, y: f32) -> f32 {
    x + y
})

// f1: async = async((x: f32, y: f32) -> f32 { ... })
f1 := async((x: f32, y: f32) -> f32 {
    x + y
})

f2 := (x: f32, y: f32) -> Future[f32] {
    f := Future(() -> f32 {
        x + y
    })

    f
}

r0 := f0(1.0, 2.0)
r0 == 3.0

r1 := f1(1.0, 2.0).await()
r1 == 3.0

fut0: Future[f32] = f1(1.0, 2.0)
r2 := fut0.await() // blocks/awaits on this call until result is ready
r2 == 3.0

fut1: Future[f32] = f1(1.0, 2.0)

// does NOT block/await on .then call
fut1.then((res: f32) -> {
    println('res: {}', res)
    res == 3.0
    res
})

fut2 := f2(1.0, 2.0)
r3 := fut2.await()
