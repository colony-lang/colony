//
// Object / Type
//
Object: MutDict = MutDict()
Type: MutDict = MutDict()

Object.__type__ = Type
Object.__bases__ = []
Object.__name__ = 'Object'
Object.__fields__ = {}
Object.__funcs__ = {}

Type.__type__ = Type
Type.__bases__ = [Object]
Type.__name__ = 'Type'
Type.__fields__ = {}

Type.__funcs__ = {
    .__call__ = (mcs: Type, name: str) -> fn {
        fn fields: Dict[str, Object] -> fn {
            fn funcs: Dict[str, fn] -> Type {
                cls: mcs = {
                    .__type__: mcs,
                    .__fields__: fields,
                    .__funcs__: funcs,
                }

                cls
            }
        }
    }
}

Object.inplace_imut()
Type.inplace_imut()

//
// user-defined types
//
A: Type = Type 'A' {
    .x: Field(int, 0),
    .y: Field(int, 0),
} { // ???
    .__add__: (self, other: A) -> A {
        A {.x: self.x + other.x, .y: self.y + other.y}
    }
}

// a0: A = A(x: 1, y: 2) ???
a0: A = A {.x: 1, .y: 2}
a1: A = A {.x: 2, .y: 3}
a2: A = a0 + a1

//
// user-defined types
//
A: Type = Type 'A' {
    .x: Field(int, 0),
    .y: Field(int, 0),
    .__add__: (self, other: A) -> A {
        A {.x: self.x + other.x, .y: self.y + other.y}
    }
}

// a0: A = A(x: 1, y: 2) ???
a0: A = A {.x: 1, .y: 2}
a1: A = A {.x: 2, .y: 3}
a2: A = a0 + a1

//
// user-defined types
//
A: Type = Type 'A' {
    .x: Field(int, 0),
    .y: Field(int, 0),
    
    .__add__: (self, other: A) -> A {
        A(x: self.x + other.x, y: self.y + other.y)
    }
}

a0: A = A(x: 1, y: 2)
a1: A = A(x: 2, y: 3)
a2: A = a0 + a1
