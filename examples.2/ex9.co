/*
    P: dict[str, object] = {
        .__type__: tuple,
        .__bases__: [object],
        .__name__: 'tuple_0xbeef',
        .__funcs__: {},
        .__fields__: {
            .x: field(int, 0),
            .y: field(int, 0),
        }
    }
 */
P: type = (x: int=0, y: int=0)

P_add: fn = (a: P, b: P) -> P {
    res: P = (x=a.x + b.x, y=a.y + b.y)
    res
}

/*
    P = {
        ...P,
        .__type__: tuple,
        .__name__: 'tuple_0xbeef',
        .__funcs__: {
            .add: (a: P, b: P) -> P {
                res: P = (x=a.x + b.x, y=a.y + b.y)
                res
            }
        },
        .__fields__: {
            .x: Field(int, 0),
            .y: Field(int, 0),
        }
    }
 */
P.add = (a: P, b: P) -> P {
    res: P = (x=a.x + b.x, y=a.y + b.y)
    res
}

/*
    P = {
        ...P,
        .__type__: tuple,
        .__name__: 'tuple_0xbeef',
        .__funcs__: {
            .add: (a: P, b: P) -> P {
                res: P = (x=a.x + b.x, y=a.y + b.y)
                res
            },
            .__add__: P.add,
        },
        .__fields__: {
            .x: Field(int, 0),
            .y: Field(int, 0),
        }
    }
 */
// P = setattr(P, '__add__', P.add)
// P = setattr(P, '__add__', getattr(P, 'add'))
P.__add__ = P.add

/*
    p0: P = {.__type__: P, .x: 1, .y: 2}
    p1: P = {.__type__: P, .x: 2, .y: 3}
 */
p0: P = (x=1, y=2)
p1: P = (x=2, y=3)

/*
    p2: P = P_add.__type__.__funcs__.__call__(P_add, p0, p1)
    p2: P = (getattr(getattr(getattr(P_add, '__type__'), '__funcs__'), '__call__'))(P_add, p0, p1)
 */
p2: P = P_add(p0, p1)

/*
    p3: P = p0.__type__.__funcs__.add(p0, p1)
 */
p3: P = p0.add(p1)

/*
    p3: P = p0.__type__.__funcs__.__add__(p0, p1)
 */
p4: P = p0 + p1
