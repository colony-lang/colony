/*
 * function definition
 */

// usual way
inc := (x: int) -> int { x + 1 }

// build function out of params tuple and code object
inc := (x: int) -> (int { x + 1 })

// build function out of params tuple and code object
P: tuple = (x: int)
c: code = int { x + 1 }
F: type = fn((int,), int)
inc: F = P -> c

// function call
r: int = inc(1)
r == 2

// chained function
F: type = fn((int,), fn((int,), fn((int,), int)))
f: F = (x: int) -> (y: int) -> (z: int) -> int { x + y + z }
r: int = f(10)(20)(30)

// chained function
F: type = fn((int,), fn((int,), fn((int,), int)))
f: F = (x) -> (y) -> (z) -> { x + y + z }
r: int = f(10)(20)(30)

/*
 * manual function construction
 */
P: type = (x: int)
c := int { x + 1 }
inc := P -> c

/*
 * chained function/code example
 */
c := int { x + 1 }
d := int { $ + y + 2 } 		// $ or $[0] or $0 ???
e := int { $ }				// $ or $[0] or $0 ???

F: type = fn((int, int), fn((int,) fn((int,), int)))
f: F = (x: int, y: int) -> c -> d -> e
r := f(1, 2)
r == 6
